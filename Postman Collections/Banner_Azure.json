{
	"info": {
		"_postman_id": "acace868-ed83-4766-98f9-fa2d88e26aa0",
		"name": "Banner_Azure",
		"description": "This collection contains scripts for API automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "dummy Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5f54fe0-01c0-4895-a82d-86465a170ece",
						"exec": [
							"\r",
							"\r",
							"\r",
							"// function getRandomElement(arr) {\r",
							"//     return arr[Math.floor(Math.random() * arr.length)];\r",
							"// }\r",
							"\r",
							"// function getRandomString() {\r",
							"//     return Math.random().toString(36).substring(2, 15);\r",
							"// }\r",
							"\r",
							"// function getRandomUUID() {\r",
							"//     return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
							"//         const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"//         return v.toString(16);\r",
							"//     });\r",
							"// }\r",
							"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(+start + Math.random() * (end - start));\r",
							"//     return date.toISOString();\r",
							"// }\r",
							"\r",
							"// function randomizeJson(json) {\r",
							"//     let randomizedJson = JSON.parse(JSON.stringify(json)); // Deep copy of the JSON\r",
							"\r",
							"//     // Randomizing top-level properties\r",
							"//     randomizedJson.id = getRandomUUID();\r",
							"//     randomizedJson.published = getRandomDate(new Date(2020, 0, 1), new Date());\r",
							"\r",
							"//     // Randomize resource section\r",
							"//     randomizedJson.resource.name = getRandomElement([\"persons\", \"organizations\", \"assets\"]);\r",
							"//     randomizedJson.resource.id = getRandomUUID();\r",
							"//     randomizedJson.resource.version = `application/vnd.hedtech.integration.v${Math.floor(Math.random() * 20)}.0+json`;\r",
							"\r",
							"//     // Randomize content section\r",
							"//     randomizedJson.content.citizenshipCountry = getRandomElement([\"GB\", \"US\", \"FR\", \"DE\"]);\r",
							"    \r",
							"//     // Randomizing addresses\r",
							"//     randomizedJson.content.addresses.forEach(addressObj => {\r",
							"//         addressObj.address.id = getRandomUUID();\r",
							"//         addressObj.startOn = getRandomDate(new Date(2020, 0, 1), new Date());\r",
							"//         addressObj.type.detail.id = getRandomUUID();\r",
							"//     });\r",
							"\r",
							"//     // Randomizing credentials\r",
							"//     randomizedJson.content.credentials.forEach(credential => {\r",
							"//         credential.value = getRandomString();\r",
							"//     });\r",
							"\r",
							"//     // Randomizing names\r",
							"//     randomizedJson.content.names.forEach(nameObj => {\r",
							"//         nameObj.firstName = getRandomElement([\"John\", \"Amandip\", \"Emily\", \"David\"]);\r",
							"//         nameObj.lastName = getRandomElement([\"Smith\", \"Biselllll\", \"Jones\", \"Kaur\"]);\r",
							"//         nameObj.middleName = getRandomElement([\"Kaurr\", \"Aman\", \"K\", \"T\"]);\r",
							"//         nameObj.fullName = `${nameObj.firstName} ${nameObj.middleName} ${nameObj.lastName}`;\r",
							"//     });\r",
							"\r",
							"//     // Randomizing emails\r",
							"//     randomizedJson.content.emails.forEach(emailObj => {\r",
							"//         emailObj.address = `${getRandomString()}@example.com`;\r",
							"//         emailObj.type.detail.id = getRandomUUID();\r",
							"//     });\r",
							"\r",
							"//     // Randomizing phones\r",
							"//     randomizedJson.content.phones.forEach(phoneObj => {\r",
							"//         phoneObj.number = `+44${Math.floor(1000000000 + Math.random() * 9000000000)}`;\r",
							"//         phoneObj.type.detail.id = getRandomUUID();\r",
							"//     });\r",
							"\r",
							"//     // Randomize ethnicity, gender, religion, roles, and other details\r",
							"//     randomizedJson.content.ethnicity.ethnicGroup.id = getRandomUUID();\r",
							"//     randomizedJson.content.gender = getRandomElement([\"male\", \"female\", \"non-binary\"]);\r",
							"//     randomizedJson.content.religion.id = getRandomUUID();\r",
							"//     randomizedJson.content.roles.forEach(roleObj => {\r",
							"//         roleObj.role = getRandomElement([\"student\", \"teacher\", \"staff\"]);\r",
							"//         roleObj.startOn = getRandomDate(new Date(2010, 0, 1), new Date());\r",
							"//     });\r",
							"\r",
							"//     // Randomize IC Extensions\r",
							"//     randomizedJson.content.ICExtensions.preferredTitle = getRandomElement([\"Mr\", \"Ms\", \"Miss\", \"Dr\"]);\r",
							"//     randomizedJson.content.ICExtensions.preferredGender = randomizedJson.content.gender;\r",
							"\r",
							"//     return randomizedJson;\r",
							"// }\r",
							"\r",
							"\r",
							"// let jsonTest = pm.globals.get(\"Data1\");\r",
							"\r",
							"// let jsondata = JSON.parse(jsonTest);\r",
							"\r",
							"\r",
							"// // Randomizing JSON\r",
							"// let randomizedJsonBody = JSON.stringify(randomizeJson(jsondata));\r",
							"// console.log(randomizedJsonBody);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.environment.set(\"requestPayload\", randomizedJsonBody);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ce29fa9e-1103-430a-acd4-b8a24f34833e",
						"exec": [
							"// Fixed syntax error in accessing preferences\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6de00cc2-8afb-4e80-8189-fe2d1f7230f7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\r\n        \"id\": \"2929432\",\r\n        \"published\": \"2024-10-29 08:37:44.350685+00\",\r\n        \"resource\": {\r\n            \"name\": \"persons\",\r\n            \"id\": \"7a27b7a8-afe8-45d0-8b96-8be83c362033\",\r\n            \"version\": \"application/vnd.hedtech.integration.v12.6.0+json\"\r\n        },\r\n        \"operation\": \"created\",\r\n        \"contentType\": \"resource-representation\",\r\n        \"content\": {\r\n            \"credentials\": [\r\n                {\r\n                    \"type\": \"bannerUdcId\",\r\n                    \"value\": \"B0F1BC3E6D11F4B736136A3C5BBF2108\"\r\n                },\r\n                {\r\n                    \"type\": \"bannerId\",\r\n                    \"value\": \"02685317\"\r\n                }\r\n            ],\r\n            \"id\": \"7a27b7a8-afe8-45d0-8b96-8be83c362033\",\r\n            \"names\": [\r\n                {\r\n                    \"firstName\": \"sdcsd\",\r\n                    \"fullName\": \"sdcsd xfvcxd svfdv\",\r\n                    \"lastName\": \"svfdv\",\r\n                    \"middleName\": \"xfvcxd\",\r\n                    \"preference\": \"legal\"\r\n                }\r\n            ]\r\n        },\r\n        \"publisher\": {\r\n            \"id\": \"66fec36e-bbb7-40cf-bc61-e72632c9b973\",\r\n            \"applicationName\": \"Imperial Integration API - DEVL\",\r\n            \"tenant\": {\r\n                \"id\": \"c8c4b987-225a-446c-9554-499073bd2109\",\r\n                \"alias\": \"Imperial College LondonDEVL\",\r\n                \"name\": \"Imperial College of Science, Technology and Medicine\",\r\n                \"environment\": \"DEVL\"\r\n            }\r\n        },\r\n        \"messageType\": \"change-notification\"\r\n    }]",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "https://pre-icint-srvcs-001-func.azurewebsites.net/api/fn_tbd_get_banner_message?code=bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D",
					"protocol": "https",
					"host": [
						"pre-icint-srvcs-001-func",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"fn_tbd_get_banner_message"
					],
					"query": [
						{
							"key": "code",
							"value": "bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multiple-Person JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c33c99ee-d132-4040-bcd0-b786031507e6",
						"exec": [
							"\r",
							"function randomizeJSON(json, numberOfCopies, pairArray) {\r",
							"    // Array to store predefined pairs of person ID and associated bannerId values\r",
							"    const idPairs = pairArray;\r",
							"    let usedPairs = [];\r",
							"\r",
							"    // Function to get a unique or reused pair\r",
							"    function getPair() {\r",
							"        if (usedPairs.length >= idPairs.length) {\r",
							"            usedPairs = []; // Reset used pairs if exhausted\r",
							"        }\r",
							"        const selectedPair = idPairs[Math.floor(Math.random() * idPairs.length)];\r",
							"        usedPairs.push(selectedPair);\r",
							"        return selectedPair;\r",
							"    }\r",
							"\r",
							"    // Helper functions for randomization\r",
							"    const getRandomString = (prefix = \"Test123\") => prefix + Math.random().toString(36).substring(7);\r",
							"    const getRandomTitle = () => [\"Mr\", \"Ms\"][Math.floor(Math.random() * 2)];\r",
							"    const getRandomEmail = () => `test${Math.floor(Math.random() * 1000)}@test.com`;\r",
							"    const getRandomEmailType = () => [\"personal\", \"college\"][Math.floor(Math.random() * 2)];\r",
							"    const getCurrentDate = () => new Date().toISOString();\r",
							"\r",
							"    // Recursive function to traverse and modify JSON\r",
							"    function traverseAndRandomize(obj) {\r",
							"        if (typeof obj !== 'object' || obj === null) return;\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (Array.isArray(obj[key])) {\r",
							"                obj[key].forEach((item) => traverseAndRandomize(item));\r",
							"            } else if (typeof obj[key] === 'object') {\r",
							"                traverseAndRandomize(obj[key]);\r",
							"            } else {\r",
							"                // Randomize based on field names\r",
							"                if ([\"firstName\", \"fullName\", \"lastName\", \"middleName\"].includes(key)) {\r",
							"                    obj[key] = getRandomString();\r",
							"                } else if ([\"title\", \"preferredTitle\"].includes(key)) {\r",
							"                    obj[key] = getRandomTitle();\r",
							"                } else if (key === \"address\") {\r",
							"                    obj[key] = getRandomEmail();\r",
							"                } else if (key === \"emailType\") {\r",
							"                    obj[key] = getRandomEmailType();\r",
							"                } else if (key === \"published\") {\r",
							"                    obj[key] = getCurrentDate();\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"        // Get a unique pair of IDs\r",
							"        const { personId, bannerId } = getPair();\r",
							"\r",
							"        // Update personId and bannerId in the JSON\r",
							"        if (obj.resource && typeof obj.resource === 'object') {\r",
							"            obj.resource.id = personId;\r",
							"        }\r",
							"\r",
							"        if (Array.isArray(obj.content?.credentials)) {\r",
							"            obj.content.credentials.forEach((credential) => {\r",
							"                if (credential.type === \"bannerId\") {\r",
							"                    credential.value = bannerId;\r",
							"                }\r",
							"            });\r",
							"        }\r",
							"\r",
							"        // Safely update email type if structure matches\r",
							"        if (Array.isArray(obj.content?.emails)) {\r",
							"            obj.content.emails.forEach((email) => {\r",
							"                if (email?.emailType) {\r",
							"                    email.emailType = getRandomEmailType();\r",
							"                }\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Array to store randomized JSON objects\r",
							"    const randomizedArray = [];\r",
							"    for (let i = 0; i < numberOfCopies; i++) {\r",
							"        const randomizedJSON = JSON.parse(JSON.stringify(json)); // Deep copy\r",
							"        traverseAndRandomize(randomizedJSON); // Apply randomization\r",
							"        randomizedArray.push(randomizedJSON);\r",
							"    }\r",
							"\r",
							"    // Set randomized array in environment for Postman\r",
							"    pm.environment.set(\"requestPayload\", JSON.stringify(randomizedArray));\r",
							"    console.log(\"Randomized JSON Array:\", randomizedArray);\r",
							"\r",
							"    return randomizedArray; // Optional if only using environment set\r",
							"}\r",
							"\r",
							"// Retrieve original JSON and ID pairs\r",
							"const JSONbody = pm.collectionVariables.get(\"person\");\r",
							"console.log(JSONbody);\r",
							"const json = JSON.parse(JSONbody);\r",
							"console.log(json);\r",
							"\r",
							"const pairArray = JSON.parse(pm.collectionVariables.get(\"BannerIDpairs\"));\r",
							"\r",
							"const numberOfCopies = 50; // Adjust this as needed\r",
							"\r",
							"// Run the function and store result\r",
							"randomizeJSON(json, numberOfCopies, pairArray);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f50a93f5-239a-40bb-9cc3-817c0bace217",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "85ca957e-becf-45dc-a6e1-380ba5c1d860",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestPayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://pre-icint-srvcs-001-func.azurewebsites.net/api/fn_tbd_get_banner_message?code=bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D",
					"protocol": "https",
					"host": [
						"pre-icint-srvcs-001-func",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"fn_tbd_get_banner_message"
					],
					"query": [
						{
							"key": "code",
							"value": "bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Person Event - Create student",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "876804eb-5445-441d-8f88-e63699046646",
						"exec": [
							"// function randomizeJSON(json, numberOfCopies, pairArray) {\r",
							"//     const idPairs = pairArray;\r",
							"//     let usedPairs = [];\r",
							"//     let newPairs = []; // Array to store new pairs for tracking\r",
							"\r",
							"//     function getPair() {\r",
							"//         if (usedPairs.length >= idPairs.length) {\r",
							"//             usedPairs = [];\r",
							"//         }\r",
							"//         const selectedPair = idPairs[Math.floor(Math.random() * idPairs.length)];\r",
							"//         usedPairs.push(selectedPair);\r",
							"//         return selectedPair;\r",
							"//     }\r",
							"\r",
							"//     const getRandomString = (prefix = \"Test123\") => prefix + Math.random().toString(36).substring(7);\r",
							"//     const getRandomTitle = () => [\"Mr\", \"Ms\"][Math.floor(Math.random() * 2)];\r",
							"//     const getRandomEmail = () => `test${Math.floor(Math.random() * 1000)}@test.com`;\r",
							"\r",
							"//     function traverseAndRandomize(obj) {\r",
							"//         if (typeof obj !== 'object' || obj === null) return;\r",
							"\r",
							"//         for (let key in obj) {\r",
							"//             if (Array.isArray(obj[key])) {\r",
							"//                 obj[key].forEach((item) => traverseAndRandomize(item));\r",
							"//             } else if (typeof obj[key] === 'object') {\r",
							"//                 traverseAndRandomize(obj[key]);\r",
							"//             } else {\r",
							"//                 if (key === \"firstName\" || key === \"fullName\" || key === \"lastName\" || key === \"middleName\") {\r",
							"//                     obj[key] = getRandomString();\r",
							"//                 } else if (key === \"published\") {\r",
							"//                     obj[key] = new Date().toISOString();\r",
							"//                 }\r",
							"//             }\r",
							"//         }\r",
							"\r",
							"//         const { personId, bannerId } = getPair();\r",
							"\r",
							"//         // Map personId to content.id and update resource.id\r",
							"//         if (obj.content && typeof obj.content === 'object') {\r",
							"//             obj.content.id = personId; // Set content.id as personId\r",
							"//         }\r",
							"\r",
							"//         if (obj.resource && typeof obj.resource === 'object') {\r",
							"//             obj.resource.id = personId; // Update resource ID as well\r",
							"//         }\r",
							"\r",
							"//         if (Array.isArray(obj.content && obj.content.credentials)) {\r",
							"//             obj.content.credentials.forEach((credential) => {\r",
							"//                 if (credential.type === \"bannerId\") {\r",
							"//                     credential.value = bannerId; // Update the banner ID\r",
							"//                 }\r",
							"//             });\r",
							"//         }\r",
							"\r",
							"//         // Store the new BannerID and PersonID as a pair\r",
							"//         newPairs.push({ personId: personId, bannerId: bannerId });\r",
							"//     }\r",
							"\r",
							"//     const randomizedArray = [];\r",
							"//     for (let i = 0; i < numberOfCopies; i++) {\r",
							"//         const randomizedJSON = JSON.parse(JSON.stringify(json));\r",
							"//         traverseAndRandomize(randomizedJSON);\r",
							"//         randomizedArray.push(randomizedJSON);\r",
							"//     }\r",
							"\r",
							"//     // Set the request payload environment variable\r",
							"//     pm.environment.set(\"requestPayload\", JSON.stringify(randomizedArray));\r",
							"\r",
							"//     // Debugging: Log newPairs before setting as collection variable\r",
							"//     console.log(\"New Pairs to be saved:\", newPairs);\r",
							"\r",
							"//     // Attempt to save newPairs as collection variable\r",
							"//     pm.collectionVariables.set(\"CreatedBannerIDpairs\", JSON.stringify(newPairs));\r",
							"// }\r",
							"\r",
							"// // Get JSON and BannerID pairs from collection variables\r",
							"// let JSONbody = pm.collectionVariables.get(\"person-create\");\r",
							"// let json = JSON.parse(JSONbody);\r",
							"// let pairArray = JSON.parse(pm.collectionVariables.get(\"BannerIDpairs\"));\r",
							"\r",
							"// // Specify the number of copies\r",
							"// const numberOfCopies = 25;\r",
							"\r",
							"// // Call the function and store the new pairs\r",
							"// const newPairs = randomizeJSON(json, numberOfCopies, pairArray);\r",
							"\r",
							"// // Additional timeout to ensure persistence in Postman\r",
							"// setTimeout(() => {\r",
							"//     pm.collectionVariables.set(\"CreatedBannerIDpairs\", JSON.stringify(newPairs));\r",
							"//     console.log(\"Collection Variable CreatedBannerIDpairs set:\", pm.collectionVariables.get(\"CreatedBannerIDpairs\"));\r",
							"// }, 1000);\r",
							"\r",
							"function randomizeJSON(json, numberOfCopies) {\r",
							"    let newPairs = []; // Array to store newly generated pairs\r",
							"\r",
							"    // Function to generate a random PersonID (UUID-like format)\r",
							"    function generatePersonID() {\r",
							"        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
							"            const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"            return v.toString(16);\r",
							"        });\r",
							"    }\r",
							"\r",
							"    // Function to generate a random BannerID (8-digit number format)\r",
							"    function generateBannerID() {\r",
							"        return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
							"    }\r",
							"\r",
							"    // Utility functions for randomization\r",
							"    const getRandomString = (prefix = \"Test123\") => prefix + Math.random().toString(36).substring(7);\r",
							"    const getCurrentDate = () => new Date().toISOString();\r",
							"\r",
							"    // Function to traverse and randomize the JSON object\r",
							"    function traverseAndRandomize(obj, personId, bannerId) {\r",
							"        if (typeof obj !== 'object' || obj === null) return;\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (Array.isArray(obj[key])) {\r",
							"                obj[key].forEach((item) => traverseAndRandomize(item, personId, bannerId));\r",
							"            } else if (typeof obj[key] === 'object') {\r",
							"                traverseAndRandomize(obj[key], personId, bannerId);\r",
							"            } else {\r",
							"                if ([\"firstName\", \"fullName\", \"lastName\", \"middleName\"].includes(key)) {\r",
							"                    obj[key] = getRandomString(); // Randomize name fields\r",
							"                } else if (key === \"published\") {\r",
							"                    obj[key] = getCurrentDate(); // Update timestamp\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"        // Update `content.id` with new `PersonID`\r",
							"        if (obj.content && typeof obj.content === 'object') {\r",
							"            obj.content.id = personId;\r",
							"        }\r",
							"\r",
							"        // Update `resource.id` with new `PersonID`\r",
							"        if (obj.resource && typeof obj.resource === 'object') {\r",
							"            obj.resource.id = personId;\r",
							"        }\r",
							"\r",
							"        // Update `credentials` array with new `BannerID`\r",
							"        if (Array.isArray(obj.content && obj.content.credentials)) {\r",
							"            obj.content.credentials.forEach((credential) => {\r",
							"                if (credential.type === \"bannerId\") {\r",
							"                    credential.value = bannerId;\r",
							"                }\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Create an array of randomized JSON copies\r",
							"    const randomizedArray = [];\r",
							"    for (let i = 0; i < numberOfCopies; i++) {\r",
							"        const randomizedJSON = JSON.parse(JSON.stringify(json));\r",
							"\r",
							"        // Generate new PersonID and BannerID\r",
							"        const personId = generatePersonID();\r",
							"        const bannerId = generateBannerID();\r",
							"\r",
							"        // Randomize the JSON with new IDs\r",
							"        traverseAndRandomize(randomizedJSON, personId, bannerId);\r",
							"        randomizedArray.push(randomizedJSON);\r",
							"\r",
							"        // Store the new pair for tracking\r",
							"        newPairs.push({ personId, bannerId });\r",
							"    }\r",
							"\r",
							"    // Set the request payload as an environment variable\r",
							"    pm.environment.set(\"requestPayload\", JSON.stringify(randomizedArray));\r",
							"\r",
							"    // Store the newly generated pairs as a collection variable\r",
							"    pm.collectionVariables.set(\"CreatedBannerIDpairs\", JSON.stringify(newPairs));\r",
							"\r",
							"    // Debug log\r",
							"    console.log(\"Newly Generated Pairs:\", newPairs);\r",
							"    console.log(\"Collection Variable 'CreatedBannerIDpairs' set:\", pm.collectionVariables.get(\"CreatedBannerIDpairs\"));\r",
							"}\r",
							"\r",
							"// Get JSON body from collection variable\r",
							"const JSONbody = pm.collectionVariables.get(\"person-create\");\r",
							"const json = JSON.parse(JSONbody);\r",
							"\r",
							"// Specify the number of copies to generate\r",
							"const numberOfCopies = 25;\r",
							"\r",
							"// Execute the randomization function\r",
							"randomizeJSON(json, numberOfCopies);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2289e704-3fea-4461-8d7c-a1cd3c616771",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "dfb8f7e5-63e7-4e05-8f51-0aa560898ba0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestPayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://pre-icint-srvcs-001-func.azurewebsites.net/api/fn_tbd_get_banner_message?code=bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D",
					"protocol": "https",
					"host": [
						"pre-icint-srvcs-001-func",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"fn_tbd_get_banner_message"
					],
					"query": [
						{
							"key": "code",
							"value": "bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Person Event JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "54718f50-0223-4234-8393-2977119ecb59",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ca95e2af-dec6-4d38-a398-88fa363595a2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7a9d4e90-cffe-49de-838b-6b2018071c28",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://pre-icint-srvcs-001-func.azurewebsites.net/api/fn_tbd_get_banner_message?code=bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D",
					"protocol": "https",
					"host": [
						"pre-icint-srvcs-001-func",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"fn_tbd_get_banner_message"
					],
					"query": [
						{
							"key": "code",
							"value": "bP7RJe3VQYke1-nLLySpNCSOVhVNp20QQKNFF-_imsxQAzFuDRVOjg%3D%3D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Emergency Contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21e79689-c969-4beb-8b91-359462a5f38f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2e6ec06d-6980-46c4-91d8-bb1169c0f358",
						"exec": [
							"// Function to randomize JSON\r",
							"function randomizeJSON(inputJson) {\r",
							"    const generateRandomId = () => {\r",
							"        return Math.floor(1000000 + Math.random() * 9000000);\r",
							"        //    'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r",
							"        //     const r = Math.random() * 16 | 0;\r",
							"        //     const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"        //     return v.toString(16);\r",
							"        // });\r",
							"    };\r",
							"\r",
							"    const generateRandomDigits = (length) => {\r",
							"        return Math.floor(Math.random() * Math.pow(10, length)).toString().padStart(length, '0');\r",
							"    };\r",
							"\r",
							"    // Randomize the contact names\r",
							"    const randomizeContactName = (name) => {\r",
							"        const randomDigits = generateRandomDigits(5);\r",
							"        return {\r",
							"            ...name,\r",
							"            firstName: `Test${randomDigits}`,\r",
							"            lastName: `Test${randomDigits}`,\r",
							"            fullName: `Test${randomDigits} Test${randomDigits}`\r",
							"        };\r",
							"    };\r",
							"\r",
							"    // Create the new JSON object\r",
							"    const randomizedJson = {\r",
							"        ...inputJson,\r",
							"        id: generateRandomId(),\r",
							"        published: new Date().toISOString(),\r",
							"        resource: {\r",
							"            ...inputJson.resource,\r",
							"            id: generateRandomId()\r",
							"        },\r",
							"        content: {\r",
							"            ...inputJson.content,\r",
							"            contact: {\r",
							"                ...inputJson.content.contact,\r",
							"                name: randomizeContactName(inputJson.content.contact.name), // Randomize contact name\r",
							"                relationship: {\r",
							"                    ...inputJson.content.contact.relationship,\r",
							"                    detail: { id: generateRandomId() } // Randomize relationship ID\r",
							"                },\r",
							"                types: inputJson.content.contact.types.map(type => ({\r",
							"                    ...type,\r",
							"                    id: generateRandomId() // Randomize types ID\r",
							"                }))\r",
							"            },\r",
							"            id: generateRandomId(), // Randomize content ID\r",
							"            person: {\r",
							"                ...inputJson.content.person,\r",
							"                id: generateRandomId() // Randomize person ID\r",
							"            },\r",
							"            ICExtensions: {\r",
							"                ...inputJson.content.ICExtensions // Keep ICExtensions unchanged\r",
							"            }\r",
							"        },\r",
							"        publisher: {\r",
							"            ...inputJson.publisher,\r",
							"            id: generateRandomId() // Randomize publisher ID\r",
							"        },\r",
							"        messageType: inputJson.messageType // Keep message type the same\r",
							"    };\r",
							"\r",
							"    return randomizedJson;\r",
							"}\r",
							"\r",
							"// Retrieve the original JSON from a collection variable\r",
							"let JSONbody = pm.collectionVariables.get(\"emergencyCon\");\r",
							"\r",
							"if (JSONbody) {\r",
							"    let json = JSON.parse(JSONbody);\r",
							"\r",
							"    // Randomize the JSON\r",
							"    const randomizedJsonBody = randomizeJSON(json);\r",
							"\r",
							"    // Set the randomized JSON to a variable (you can use environment or collection variable as needed)\r",
							"    pm.environment.set(\"requestPayload\", JSON.stringify(randomizedJsonBody));\r",
							"} else {\r",
							"    console.error(\"No JSON body found in the collection variable 'Data1'.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "36af2436-20c1-4234-a636-bde7a9c2351f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[{{requestPayload}}]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/test-execution"
			},
			"response": []
		},
		{
			"name": "Address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "687edada-d5eb-4f09-996c-c985cb4f03c9",
						"exec": [
							"// Function to randomize JSON\r",
							"function randomizeJSON(inputJson) {\r",
							"    const generateRandomId = () => {\r",
							"        return Math.floor(1000000 + Math.random() * 9000000);\r",
							"        //     'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r",
							"        //     const r = Math.random() * 16 | 0;\r",
							"        //     const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
							"        //     return v.toString(16);\r",
							"        // });\r",
							"    };\r",
							"\r",
							"    const generateRandomDigits = (length) => {\r",
							"        return Math.floor(Math.random() * Math.pow(10, length)).toString().padStart(length, '0');\r",
							"    };\r",
							"\r",
							"    // Randomize the address lines\r",
							"    const randomizeAddressLines = (addressLines) => {\r",
							"        const randomDigits = generateRandomDigits(5);\r",
							"        return addressLines.map(() => `TestAddress${randomDigits}`);\r",
							"    };\r",
							"\r",
							"    // Create the new JSON object\r",
							"    const randomizedJson = {\r",
							"        ...inputJson,\r",
							"        id: generateRandomId(),\r",
							"        published: new Date().toISOString(),\r",
							"        resource: {\r",
							"            ...inputJson.resource,\r",
							"            id: generateRandomId()\r",
							"        },\r",
							"        content: {\r",
							"            ...inputJson.content,\r",
							"            addressLines: randomizeAddressLines(inputJson.content.addressLines), // Randomizing address lines\r",
							"            code: generateRandomDigits(2), // Randomizing code with 2 digits\r",
							"            id: generateRandomId(), // Randomizing content ID\r",
							"            place: {\r",
							"                ...inputJson.content.place,\r",
							"                country: {\r",
							"                    ...inputJson.content.place.country,\r",
							"                    code: inputJson.content.place.country.code, // Keeping the country code and place details the same\r",
							"                    locality: inputJson.content.place.country.locality,\r",
							"                    postalCode: inputJson.content.place.country.postalCode,\r",
							"                    subRegion: {\r",
							"                        ...inputJson.content.place.country.subRegion\r",
							"                    },\r",
							"                    title: inputJson.content.place.country.title\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        publisher: {\r",
							"            ...inputJson.publisher,\r",
							"            id: generateRandomId() // Randomizing publisher ID\r",
							"        },\r",
							"        messageType: inputJson.messageType // Keeping message type the same\r",
							"    };\r",
							"\r",
							"    return randomizedJson;\r",
							"}\r",
							"\r",
							"// Retrieve the original JSON from a collection variable\r",
							"let JSONbody = pm.collectionVariables.get(\"address\");\r",
							"\r",
							"if (JSONbody) {\r",
							"    let json = JSON.parse(JSONbody);\r",
							"\r",
							"    // Randomize the JSON\r",
							"    const randomizedJsonBody = randomizeJSON(json);\r",
							"\r",
							"    // Set the randomized JSON to a variable (you can use environment or collection variable as needed)\r",
							"    pm.environment.set(\"requestPayload\", JSON.stringify(randomizedJsonBody));\r",
							"} else {\r",
							"    console.error(\"No JSON body found in the collection variable 'Data1'.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3723e3d9-877d-4951-8a79-29661e35e973",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f8af82e0-f1e4-458e-b909-7682264923b8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[{{requestPayload}}]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/test-execution"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fb38dee8-2c6f-42e0-8f5a-9056884177ae",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fd77a294-3faa-4e02-b07d-10d5caf8f3c7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "64c7d3a9-5aff-475b-ac12-7d4b9330de99",
			"key": "person",
			"value": "{\n    \"id\": \"2890670\",\n    \"published\": \"2024-09-26 09:57:28.735795+00\",\n    \"resource\": {\n        \"name\": \"persons\",\n        \"id\": \"8a176460-cad5-4f71-8ff5-a36e2242f34d\",\n        \"version\": \"application/vnd.hedtech.integration.v12.6.0+json\"\n    },\n    \"operation\": \"replaced\",\n    \"contentType\": \"partial\",\n    \"content\": {\n        \"addresses\": [\n            {\n                \"address\": { \"id\": \"4fca4651-5db0-4031-ab95-f67927a0e101\" },\n                \"startOn\": \"2023-08-29T15:23:40Z\",\n                \"type\": { \"addressType\": \"home\", \"detail\": { \"id\": \"afcc9b99-18aa-4d74-8fa1-11812307bb14\" } }\n            },\n            {\n                \"address\": { \"id\": \"a644e0cd-eee1-4b87-b9fb-f28c449f1594\" },\n                \"startOn\": \"2023-08-29T15:23:46Z\",\n                \"type\": { \"addressType\": \"business\", \"detail\": { \"id\": \"8f3aaea0-7c94-4c5d-b0ab-43b8f4e1d582\" } }\n            }\n        ],\n        \"citizenshipCountry\": \"GB\",\n        \"credentials\": [\n            { \"type\": \"bannerSourcedId\", \"value\": \"3152\" },\n            { \"type\": \"bannerUserName\", \"value\": \"abisel\" },\n            { \"type\": \"bannerUdcId\", \"value\": \"6DCC3FCFD7C0509906F70E9BAD51F362\" },\n            { \"type\": \"bannerId\", \"value\": \"00830164\" }\n        ],\n        \"dateOfBirth\": \"1984-09-29\",\n        \"emails\": [\n            { \"address\": \"2227314.amandip.bisel@imperial.ac.uk\", \"type\": { \"detail\": { \"id\": \"30592ab7-985f-4c40-8625-6dc103a8f720\" }, \"emailType\": \"school\" } },\n            { \"address\": \"571947.amandip.bisel@gmail.com\", \"type\": { \"detail\": { \"id\": \"8df479c1-a26f-46cd-940a-7c1198df2aa0\" }, \"emailType\": \"personal\" } }\n        ],\n        \"ethnicity\": { \"ethnicGroup\": { \"id\": \"2cc87121-63e3-4c60-a76a-732902bb8dd1\" }, \"reporting\": [{ \"country\": { \"code\": \"USA\", \"ethnicCategory\": \"hispanic\" } }] },\n        \"gender\": \"female\",\n        \"genderMarker\": { \"id\": \"84a0bca9-768f-4c9d-8f0e-ae929ef46ea0\" },\n        \"id\": \"8a176460-cad5-4f71-8ff5-a36e2242f34d\",\n        \"names\": [\n            { \"firstName\": \"Amandiparrrr\", \"fullName\": \"Amandiparrrr Kaurr Biselllll test 100 TEST\", \"lastName\": \"Biselllll test 100 TEST\", \"middleName\": \"Kaurr\", \"preference\": \"preferred\", \"title\": \"Miss\", \"type\": { \"category\": \"favored\", \"detail\": { \"id\": \"734964d7-a8df-4954-8bd6-fa738c2c2d6e\" } } },\n            { \"firstName\": \"Amandipar\", \"fullName\": \"Amandipar Kaur Biselllll test 100*****##$#$#$#$\", \"lastName\": \"Biselllll test 100*****##$#$#$#$\", \"middleName\": \"Kaur\", \"type\": { \"category\": \"legal\", \"detail\": { \"id\": \"70966709-73f3-4598-9af7-a59393ee0ebd\" } } }\n        ],\n        \"phones\": [{ \"number\": \".\", \"type\": { \"detail\": { \"id\": \"5ace4254-06df-4aea-952d-1fd57859bbc8\" }, \"phoneType\": \"mobile\" } }],\n        \"privacyStatus\": { \"privacyCategory\": \"unrestricted\" },\n        \"religion\": { \"id\": \"2984f4dd-8a35-4b29-9ac0-7d36ea939a3b\" },\n        \"roles\": [{ \"role\": \"student\", \"startOn\": \"2015-09-30T23:00:00Z\" }],\n        \"ICExtensions\": { \"preferredTitle\": \"Miss\", \"hesaReligion\": \"13\", \"hesasexort\": \"98\", \"hesagenderid\": \"01\", \"hesadsa\": \"5\", \"preferredGender\": \"Female\", \"hesaTtaccom\": \"7\" }\n    },\n    \"publisher\": { \"id\": \"66fec36e-bbb7-40cf-bc61-e72632c9b973\", \"applicationName\": \"Imperial Integration API - DEVL\", \"tenant\": { \"id\": \"c8c4b987-225a-446c-9554-499073bd2109\", \"alias\": \"Imperial College LondonDEVL\", \"name\": \"Imperial College of Science, Technology and Medicine\", \"environment\": \"DEVL\" } },\n    \"messageType\": \"change-notification\"\n}"
		},
		{
			"id": "7323d669-9301-46e8-9a6f-a3efc012306e",
			"key": "emergencyCon",
			"value": "{\n        \"id\": \"2917601\",\n        \"published\": \"2024-10-22 08:24:10.102449+00\",\n        \"resource\": {\n            \"name\": \"person-emergency-contacts\",\n            \"id\": \"1ea2131c-9455-45d6-a3fa-d7787b639f6d\",\n            \"version\": \"application/vnd.hedtech.integration.v1.0.0+json\"\n        },\n        \"operation\": \"created\",\n        \"contentType\": \"resource-representation\",\n        \"content\": {\n            \"contact\": {\n                \"name\": {\n                    \"firstName\": \"test\",\n                    \"fullName\": \"test test\",\n                    \"lastName\": \"test\"\n                },\n                \"relationship\": {\n                    \"detail\": {\n                        \"id\": \"02f5f4d1-0e8f-4846-83c2-0e39e796c9cb\"\n                    },\n                    \"type\": \"Sibling\"\n                },\n                \"types\": [\n                    {\n                        \"id\": \"67ad4890-3805-4e77-8e60-06796ee78535\"\n                    }\n                ]\n            },\n            \"id\": \"1ea2131c-9455-45d6-a3fa-d7787b639f6d\",\n            \"person\": {\n                \"id\": \"72a88cad-b3ad-47d0-bc2b-174d865a176e\"\n            },\n            \"ICExtensions\": {\n                \"spremrgStreetLine1\": \"123 Twilley Street\",\n                \"spremrgStreetLine2\": \"sdcds\",\n                \"spremrgStreetLine3\": \"cscds\",\n                \"spremrgCity\": \"London\",\n                \"spremrgZip\": \"SW184NW\",\n                \"spremrgNation\": \"United Kingdom\",\n                \"emrgPriority\": \"2\"\n            }\n        },\n        \"publisher\": {\n            \"id\": \"66fec36e-bbb7-40cf-bc61-e72632c9b973\",\n            \"applicationName\": \"Imperial Integration API - DEVL\",\n            \"tenant\": {\n                \"id\": \"c8c4b987-225a-446c-9554-499073bd2109\",\n                \"alias\": \"Imperial College LondonDEVL\",\n                \"name\": \"Imperial College of Science, Technology and Medicine\",\n                \"environment\": \"DEVL\"\n            }\n        },\n        \"messageType\": \"change-notification\"\n    }"
		},
		{
			"id": "6c18be29-97c1-420a-8f8f-14ed006586f9",
			"key": "address",
			"value": "{\n        \"id\": \"2917602\",\n        \"published\": \"2024-10-22 08:30:20.824159+00\",\n        \"resource\": {\n            \"name\": \"addresses\",\n            \"id\": \"9bc1f16f-284d-4ac4-91fc-f56f643c7565\",\n            \"version\": \"application/vnd.hedtech.integration.v11.2.0+json\"\n        },\n        \"operation\": \"replaced\",\n        \"contentType\": \"resource-representation\",\n        \"content\": {\n            \"addressLines\": [\n                \"123 Twilley Street\",\n                \"test\",\n                \"test\"\n            ],\n            \"code\": \"1\",\n            \"id\": \"9bc1f16f-284d-4ac4-91fc-f56f643c7565\",\n            \"place\": {\n                \"country\": {\n                    \"code\": \"GB\",\n                    \"locality\": \"London\",\n                    \"postalCode\": \"SW184NW\",\n                    \"subRegion\": {\n                        \"code\": \"ZZ\",\n                        \"title\": \"Unknown\"\n                    },\n                    \"title\": \"United Kingdom\"\n                }\n            }\n        },\n        \"publisher\": {\n            \"id\": \"66fec36e-bbb7-40cf-bc61-e72632c9b973\",\n            \"applicationName\": \"Imperial Integration API - DEVL\",\n            \"tenant\": {\n                \"id\": \"c8c4b987-225a-446c-9554-499073bd2109\",\n                \"alias\": \"Imperial College LondonDEVL\",\n                \"name\": \"Imperial College of Science, Technology and Medicine\",\n                \"environment\": \"DEVL\"\n            }\n        },\n        \"messageType\": \"change-notification\"\n    }"
		},
		{
			"id": "14095d99-4423-4ad7-8006-6383695d1315",
			"key": "person-create",
			"value": ""
		},
		{
			"id": "64e42b43-851c-49d0-a91b-4072bdb1f41f",
			"key": "BannerIDvalues",
			"value": "",
			"disabled": true
		},
		{
			"id": "e9750511-26f3-4f19-bc57-e89cec957dba",
			"key": "BannerIDpairs",
			"value": ""
		},
		{
			"id": "d5316393-c19f-45ad-9784-6f8785e1c228",
			"key": "CreatedBannerIDpairs",
			"value": ""
		}
	]
}